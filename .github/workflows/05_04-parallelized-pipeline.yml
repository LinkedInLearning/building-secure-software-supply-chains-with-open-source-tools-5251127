name: Final – Secure Supply Chain Pipeline
on:
  workflow_dispatch:   # add: push / pull_request later if desired

# Least-privilege defaults; SARIF upload needs security-events: write
permissions:
  contents: read
  security-events: write

concurrency:
  group: final-supply-chain-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # --- SBOM (image) with Syft
  sbom-image:
    name: SBOM (Juice Shop image via Syft)
    runs-on: ubuntu-latest
    steps:
      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          image: bkimminich/juice-shop:latest
          format: spdx-json
          output-file: juice-shop.spdx.json
          artifact-name: sbom-juice-shop
          upload-artifact: true

  # --- Grype scan of that SBOM (gates optional)
  grype-scan-image-sbom:
    name: Grype Scan (from SBOM)
    runs-on: ubuntu-latest
    needs: [sbom-image]
    steps:
      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom-juice-shop
          path: ./artifacts

      - name: Scan SBOM with Grype (produce SARIF)
        id: grype
        uses: anchore/scan-action@v6
        with:
          sbom: ./artifacts/juice-shop.spdx.json
          fail-build: false        # ⬅ flip to true to enforce a gate
          severity-cutoff: high    # negligible|low|medium|high|critical
          output-format: sarif     # table|json|cyclonedx-json also available
          cache-db: true

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

  # --- SCA: dependency scan of repo (libraries only)
  sca-trivy-fs:
    name: SCA (Dependencies only – Trivy fs)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS scan (libraries)
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          vuln-type: 'library'     # SCA only (no OS packages)
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '0'           # ⬅ set to '1' to fail on findings

      # Optional: JSON artifact for record-keeping
      # - name: Trivy FS JSON
      #   uses: aquasecurity/trivy-action@0.32.0
      #   with:
      #     scan-type: 'fs'
      #     scan-ref: '.'
      #     vuln-type: 'library'
      #     format: 'json'
      #     output: trivy-fs.json
      #     exit-code: '0'
      # - uses: actions/upload-artifact@v4
      #   with: { name: trivy-fs-report, path: trivy-fs.json }

  # --- Container image scan (OS + libraries)
  image-scan-trivy:
    name: Container Image Scan (Trivy image)
    runs-on: ubuntu-latest
    steps:
      - name: Scan public image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: 'bkimminich/juice-shop:latest'
          vuln-type: 'os,library'  # base image + app deps
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '0'           # ⬅ set to '1' to enforce a gate

  # --- Secrets scanning
  secrets-gitleaks:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-banner --redact
      # Default behavior fails on findings; to keep demo green:
      # continue-on-error: true